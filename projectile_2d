@author: Alec M

import numpy as np
import matplotlib.pyplot as plt
import scipy.integrate as sci

def rocket_dynamics(state, t, m, g):
    """Compute derivatives for rocket dynamics."""
    z, velz = state
    zdot = velz
    
    # Compute total forces
    aero = 0.0  # Aerodynamics
    thrust = 0.0  # Thrust
    
    F = g + aero + thrust
    zddot = F / m
    
    return [zdot, zddot]

def simulate_rocket():
    """Simulate rocket dynamics and plot results."""
    # Define constant parameters
    M = 640  # Rocket mass (kg)
    G = -9.81 * M  # Gravitational force
    
    # Initial conditions
    z0 = 0  # Initial altitude (m)
    velz0 = 164.0  # Initial velocity (m/s)
    state_initial = np.array([z0, velz0])
    
    # Time window
    t_out = np.linspace(0, 35, 1000)  # Time vector (sec)
    
    # Numerical integration
    state_out = sci.odeint(rocket_dynamics, state_initial, t_out, args=(M, G))
    
    # Extract variables
    z_out = state_out[:, 0]  # Altitude
    velz_out = state_out[:, 1]  # Velocity
    
    # Plot results
    plt.figure(figsize=(10, 5))
    
    # Altitude plot
    plt.subplot(1, 2, 1)
    plt.plot(t_out, z_out)
    plt.xlabel('Time (sec)')
    plt.ylabel('Altitude (m)')
    plt.title('Rocket Altitude')
    plt.grid(True)
    
    # Velocity plot
    plt.subplot(1, 2, 2)
    plt.plot(t_out, velz_out)
    plt.xlabel('Time (sec)')
    plt.ylabel('Velocity (m/s)')
    plt.title('Rocket Velocity')
    plt.grid(True)
    
    plt.tight_layout()
    plt.show()  # Display the plots

if __name__ == "__main__":
    simulate_rocket()
