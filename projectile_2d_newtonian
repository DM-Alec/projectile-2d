# -*- coding: utf-8 -*-
"""
Created on Fri Mar 15 14:40:27 2024

@author: Alec
"""

# imported modules
import numpy as np #numeric python
import matplotlib.pyplot as plt #matlab style plotting 
import scipy.integrate as sci #integration toolbox

###define constant parameters

#grav const

G = 6.6742e-11 #Nm^2/kg^2

#planet Earth
Rplanet = 6.3781e6 #m
mplanet = 5.9722e24 #kg


#rocket
m = 640 #kg

#grav acceleration

def g(z):
    global Rplanet, mplanet
    
    r = np.sqrt(z**2)
    
    if r < Rplanet:
        
        a = 0.0 
            
    else:
                
        a = G*mplanet/(Rplanet**3)*r
        
    print(a)
    
    return a


            
#eq of motion, all in meters
# F = m*a = m*zddot
#z = alt above surface
#zdot = velocity
# zddot = acceleration
#2nd ODE
def derivatives(state, t):
    global m
    
    #state vector
    z = state[0] #not in use, so used as a placeholder for now
    velz = state[1]
    
    #compute zdot, kinematic relation
    zdot = velz
    
    ###compute total forces
    

    #gravity
    gf = -g(z) * m    
    #aerodynamics
    aerof = 0.0
    
    #thrust
    thrustf = 0.0
    
    F = gf + aerof + thrustf
    
    #compute acceleration
    zddot = F/m
    
    #compute statedot
    statedot = np.asarray([zdot,zddot])
    
    return statedot

###MAIN script to integrate

#test surface gravity
print("surface gravity (m/s^2 = ", g(Rplanet))


#initial conditions
z0 = Rplanet #m
velz0 = 164.0 #m/s
stateinitial = np.asarray([z0,velz0])

#time window
tout = np.linspace(0,35,1000) #(ti, tf, num of datapoints) in sec

#numerical integration
stateout = sci.odeint(derivatives,stateinitial,tout)

###rename variables
zout = stateout[:,0]
altitude = zout - Rplanet
velzout = stateout[:,1]

###plot

#altitude
plt.plot(tout,altitude)
plt.xlabel('Time (sec)')
plt.ylabel('Altitude (m)')
plt.grid()

#velocity
plt.figure()
plt.plot(tout,velzout)
plt.xlabel('Time (sec)')
plt.ylabel('Speed (m/s)')
plt.grid()
